.. _guide-using-the-scanner-activity:

==========================
Using the Scanner Activity
==========================

The Scanner Activity (``net.gini.vision.android.ScannerActivity``) is the main feature of the Gini Vision library for
Android. Basically your application starts this activity and gets the cropped and enhanced image when the activity
returns with results.

Starting the Scanner Activity
=============================

The ``Intent`` which triggers the scanner activity must be parameterized. There are two mandatory parameters:

``ScannerActivity.EXTRA_UPLOAD_ACTIVITY``
        The ``UploadActitvity`` must be set which is called after the document has been captured. This class
        must extend the ``net.gini.android.vision.UploadActivity`` and implement the ``uploadDocument(..)`` method.
        There is a static helper method ``ScannerActivity.setUploadActivityExtra`` in order to make setting the
        activity more convenient.

``ScannerActivity.EXTRA_DOCTYPE_BUNDLE``
        The desired document type must be selected by the user and must be provided as
        ``net.gini.android.vision.DocumentType`` instance. Furthermore, the document type parameter must be wrapped in
        a bundle using the key ``ScannerActivity.EXTRA_DOCTYPE``

You can also put two optional extras in the intent. Both expect a boolean value.

``ScannerActivity.EXTRA_SHOW_HELP``
        Whether the ``ScannerActivity`` should show the ``HelpActivity`` the first time it is launched during an
        application run.

``ScannerActivity.EXTRA_STORE_ORIGINAL``
        Whether the ScannerActivity should store and return the original image. Please note that all images are
        held in the device's memory, not in the storage. Because of that, you should use this feature only for tests or
        debugging since it increases memory usage significantly.


Example
-------

The following example starts the ScannerActivity and the ScannerActivity will return both the original image and the
enhanced image. The ``MyUploadActivity`` is a class implemented by your app.

.. code-block:: java

            final Intent scanIntent = new Intent(this, ScannerActivity.class);
            scanIntent.putExtra(ScannerActivity.EXTRA_STORE_ORIGINAL, true);
            scanIntent.putExtra(ScannerActivity.EXTRA_STORE_RECTIFIED, true);

            final DocumentType documentType =  // user has selected the document type already
            final Bundle docTypeBundle = new Bundle();
            docTypeBundle.putParcelable(ScannerActivity.EXTRA_DOCTYPE, documentType); 
            scanIntent.putExtra(ScannerActivity.EXTRA_DOCTYPE_BUNDLE, docTypeBundle);

            ScannerActivity.setUploadActivityExtra(scanIntent, this, MyUploadActivity.class);
            startActivityForResult(scanIntent, IMAGE_REQUEST);

.. note:: Always start the activity with the ``startActivityForResult()`` method and not with the
          ``startActivity()`` method. Otherwise you won't be able to obtain the captured documents.



Getting the Results of the Scanner
==================================

The ScannerActivity finishes automatically once the user has captured an image successfully.  Afterwards, the Android
system calls your activity's
`onActivityResult <http://developer.android.com/reference/android/app/Activity.html#onActivityResult(int, int, android.content.Intent)>`_
method. `responseCode` and the Intent `data` will be the values that your derived ``UploadActivity`` set.

If taking the picture was not successful due to some user interaction (e.g. the application user pressed the back
button), `responseCode` will be ``Activity.RESULT_CANCELED``.

If some error happened during the picture taking, `responseCode` will be ``ScannerActivity.RESULT_ERROR``. The result
intent has an extra ``ScannerActivity.EXTRA_ERROR`` that contains an error enumeration. See
:ref:`the example <scanner-activity-results-example>` for details on how to extract the error enumeration. The
following errors are possible:

``LOW_MEMORY``
   There was not enough memory available to process the photo.

``NO_CAMERA``
   The Gini Vision library was unable to connect to the camera service.


``BitmapFuture``
----------------

The ScannerActivity uses BitmapFuture (``net.gini.android.vision.BitmapFuture``) instances to pass bitmaps between
activities. The BitmapFuture implements the conventional
`Future <http://developer.android.com/reference/java/util/concurrent/Future.html>`_ interface. You can always use the
``get()`` method on a BitmapFuture directly; it does return immediately and returns a
`Bitmap <http://developer.android.com/reference/android/graphics/Bitmap.html>`_. Unfortunately, it is not possible to
pass the result images directly in the result intent since
`Android has some hard limitations on the size of transactions <http://developer.android.com/reference/android/os/TransactionTooLargeException.html>`_.

There are two extras in the result intent which is given to the method; both are BitmapFuture instances:

``ScannerActivity.EXTRA_DOCUMENT``
    A BitmapFuture that will get the rectified image of the document.

``ScannerActivity.EXTRA_ORIGINAL``
    A BitmapFuture that will get the original image without any enhancements. Only available when the activity was
    started with the ``ScannerActivity.EXTRA_STORE_ORIGINAL`` extra.

.. warning::

   It is important that your application always extracts the
   `BitmapFuture` instances out of the result intent. Otherwise,
   memory leaks are possible.


.. _scanner-activity-results-example:

Example
-------

.. code-block:: java

        @Override
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            Bundle documentBundle;
            BitmapFuture originalFuture = null;
            BitmapFuture rectifiedFuture = null;
            
            // we always try to get the document to prevent memory leaks
            if (requestCode == IMAGE_REQUEST && data != null) {
                documentBundle = data.getBundleExtra(ScannerActivity.EXTRA_DOCUMENT_BUNDLE);
                if (documentBundle != null) {
                    originalFuture = documentBundle.getParcelable(ScannerActivity.EXTRA_ORIGINAL);
                    rectifiedFuture = documentBundle.getParcelable(CaptureActivity.EXTRA_DOCUMENT);
                }
            }

            if (requestCode == IMAGE_REQUEST && resultCode == RESULT_OK) {
                // everything ok, do something with the document
            } else if (requestCode == IMAGE_REQUEST && resultCode == ScannerActivity.RESULT_ERROR) {
                final ScannerActivity.Error error = data.getParcelableExtra(ScannerActivity.EXTRA_ERROR);
                // unfortunately there was an error we must handle 
            }
         }


Upload the Document to Gini using the Gini API SDK
==================================================
First of all, we have to include the Gini API SDK as dependency in the ``build.gradle``.

.. code-block:: groovy

    dependencies {
        ...
        compile ('net.gini:gini-android-sdk:1.1.33@aar'){
            transitive = true
        } 
        ...

The Gini SDK provides a ``Gini`` class which acts as a facade to the whole functionality of the Gini API. Your app must
create a single instance of this class and hold it for its complete life cyle.


Finally, the ``Gini`` instance is used in the ``uploadDocument(..)`` method of the ``MyUploadActivity`` which extends
``net.gini.android.vision.UploadActivity`` to upload the captured document. The example below shows a possible
implementation which puts the result extractions into a new intent for further processing.

.. code-block:: java

     public void uploadDocument(final Bitmap document) {
            final Intent intent = getIntent();
            final Bundle documentTypeBundle = intent.getBundleExtra(EXTRA_DOCUMENT_TYPE_BUNDLE);
            final DocumentType documentType = documentTypeBundle.getParcelable(EXTRA_DOCUMENT_TYPE);
            documentTaskManager.createDocument(document, null, documentType.getApiDocTypeHint(), 50)
                    .onSuccessTask(new Continuation<Document, Task<Document>>() {
                        @Override
                        public Task<Document> then(Task<Document> task) throws Exception {
                            final Document document = task.getResult();
                            documentId = document.getId();
                            return documentTaskManager.pollDocument(document);
                        }
                    })
                    .onSuccessTask(new Continuation<Document, Task<Map<String, SpecificExtraction>>>() {
                        @Override
                        public Task<Map<String, SpecificExtraction>> then(Task<Document> task) throws Exception {
                            return documentTaskManager.getExtractions(task.getResult());
                        }
                    })
                    .onSuccess(new Continuation<Map<String, SpecificExtraction>, Object>() {
                        @Override
                        public Object then(Task<Map<String, SpecificExtraction>> task) throws Exception {
                            final Map<String, SpecificExtraction> extractions = task.getResult();
                            final Bundle extractionsBundle = new Bundle();
                            for (Map.Entry<String, SpecificExtraction> entry : extractions.entrySet()) {
                                extractionsBundle.putParcelable(entry.getKey(), entry.getValue());
                            }
                            final Intent result = new Intent();
                            result.putExtra(EXTRA_DOCUMENT, documentId);
                            result.putExtra(EXTRA_EXTRACTIONS, extractionsBundle);
                            setResult(RESULT_OK, result);
                            return null;
                        }
                    })
                    .continueWith(new Continuation<Object, Object>() {
                        @Override
                        public Object then(Task<Object> task) throws Exception {
                            if (task.isFaulted()) {
                                //noinspection ThrowableResultOfMethodCallIgnored
                                final Exception exception = task.getError();
                                // We could inspect the exception here -- should always be a subclass of a
                                // com.android.volley.VolleyError. For example:
                                // * AuthFailureError: Client credentials or access token was wrong
                                // * ConnectError, TimeoutError: can be caused by a flaky connection
                                // * NoConnectionError: (Likely) no Internet connection available
                                LOG.debug("Upload failed:", exception);
                                // Signal to parent activity that the uploading failed
                                final Intent resultIntent = new Intent();
                                resultIntent.putExtra(EXTRA_ERROR_STRING, exception.toString());
                                setResult(RESULT_UPLOAD_ERROR, resultIntent);
                            }
                            LOG.debug("done");
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    finish();
                                }
                            });
                            return null;
                        }
                    });
        }

.. seealso::
    
    `The Gini SDK integration guide for Android. <https://github.com/gini/gini-sdk-android/wiki/Integration-Guide>`_

Full Example
============

Below is a full example of an activity which displays a button. When the user clicks on the button, the activity starts
the document scanner. Once the user has successfully scanned a document, the ScannerActivity returns and the example
activity can use the rectified bitmap of the document.

.. code-block:: java

    package net.gini.android.visiontest;

    import android.app.Activity;
    import android.content.Intent;
    import android.graphics.Bitmap;
    import android.os.Bundle;

    import net.gini.android.vision.BitmapFuture;
    import net.gini.android.vision.ScannerActivity;


    public class ExampleActivity extends Activity {

        protected static final int IMAGE_REQUEST = 1;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_example);
        }

        @Override
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            Bundle documentBundle;
            BitmapFuture originalFuture = null;
            
            // we always try to get the document to prevent memory leaks
            if (requestCode == IMAGE_REQUEST && data != null) {
                documentBundle = data.getBundleExtra(ScannerActivity.EXTRA_DOCUMENT_BUNDLE);
                if (documentBundle != null) {
                    originalFuture = documentBundle.getParcelable(ScannerActivity.EXTRA_ORIGINAL);
                }
            }

            if (requestCode == IMAGE_REQUEST && resultCode == RESULT_OK) {
                // everything ok, do something with the document
            } else if (requestCode == IMAGE_REQUEST && resultCode == ScannerActivity.RESULT_ERROR) {
                final ScannerActivity.Error error = data.getParcelableExtra(ScannerActivity.EXTRA_ERROR);
                // unfortunately there was an error we must handle 
            }
        }


        /**
         * Callback which is called when the user clicked on a button. Starts the document scanner.
         */
        public void onClick(View view) {
            Intent scanIntent = new Intent(this, ScannerActivity.class);
            scanIntent.putExtra(ScannerActivity.EXTRA_STORE_RECTIFIED, true);
   	        // MyUploadActivity is your Activity that implements the upload or processing logic.
	        // It needs to be derived from Gini Vision library's UploadActivity.
            ScannerActivity.setUploadActivityExtra(scanIntent, this, MyUploadActivity.class);
            startActivityForResult(scanIntent, IMAGE_REQUEST);
        }
    }


.. seealso::

    The Android documentation on `Getting a result from an activity
    <http://developer.android.com/training/basics/intents/result.html>`_.
