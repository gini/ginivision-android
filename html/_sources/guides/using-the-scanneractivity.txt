.. _guide-using-the-scanner-activity:

==========================
Using the Scanner Activity
==========================

The Scanner Activity (``net.gini.vision.android.ScannerActivity``) is the main feature of the Gini
Vision library for Android. Basically your application starts this activity and gets the cropped
and enhanced image when the activity returns with results.

Starting the Scanner Activity
=============================

You can put two extras in the intent which starts the activity. Both expect a boolean value.

``ScannerActivity.EXTRA_STORE_RECTIFIED``
    Whether the ScannerActivity should store and return the rectified document. Usually, you will
    always use this extra since it is the main feature of the Gini Vision library.

``ScannerActivity.EXTRA_STORE_ORIGINAL``
    Whether the ScannerActivity should store and return the original image. Please note that all
    images are held in the device's memory, not in the storage. Because of that, you should use this
    feature only for tests or debugging since it increases memory usage significantly.


Example
-------

The following example starts the ScannerActivity and the ScannerActivity will both return the
original image and the enhanced image.

.. code-block:: java

            Intent scanIntent = new Intent(this, ScannerActivity.class);
            scanIntent.putExtra(ScannerActivity.EXTRA_STORE_RECTIFIED, true);
            scanIntent.putExtra(ScannerActivity.EXTRA_STORE_ORIGINAL, true);
            startActivityForResult(scanIntent, IMAGE_REQUEST);

.. note:: Always start the activity with the ``startActivityForResult()`` method and not with the
          ``startActivity()`` method. Otherwise you won't be able to obtain the captured documents.



Getting the Results of the Scanner
==================================

The ScannerActivity finishes automatically once the user has captured
an image successfully.  Afterwards, the Android system calls your
activity's `onActivityResult
<http://developer.android.com/reference/android/app/Activity.html#onActivityResult(int,
int, android.content.Intent)>`_ method. `responseCode` and the
Intent `data` will be the values that your derived ``UploadActivity`` set.

If taking the picture was not successful due to some user interaction
(e.g. the application user pressed the back button), `responseCode`
will be ``Activity.RESULT_CANCELED``.

If some error happened during the picture taking, `responseCode` will
be ``ScannerActivity.RESULT_ERROR``. The result intent has an extra
``ScannerActivity.EXTRA_ERROR`` that contains an error
enumeration. See :ref:`the example <scanner-activity-results-example>`
for details how to extract the error enumeration. The following errors
are possible:

``LOW_MEMORY``
   There was not enough memory available to process the photo.

``NO_CAMERA``
   The Gini Vision library was unable to connect to the camera service.


``BitmapFuture``
----------------

The ScannerActivity uses BitmapFuture (``net.gini.android.vision.BitmapFuture``) instances to pass
bitmaps between activities. The BitmapFuture implements the conventional `Future
<http://developer.android.com/reference/java/util/concurrent/Future.html>`_ interface. You can
always use the ``get()`` method on a BitmapFuture directly; it does return immediately and returns
a `Bitmap <http://developer.android.com/reference/android/graphics/Bitmap.html>`_.
Unfortunately, it is not possible to pass the result images directly in the result intent since
`Android has some hard limitations on the size of transactions
<http://developer.android.com/reference/android/os/TransactionTooLargeException.html>`_.

There are two extras in the result intent which is given to the method; both are BitmapFuture
instances:

``ScannerActivity.EXTRA_RECTIFIED``
    A BitmapFuture that will get the rectified image of the document.

``ScannerActivity.EXTRA_ORIGINAL``
    A BitmapFuture that will get the original image without any enhancements. Only available
    when the activity was started with the ``ScannerActivity.EXTRA_STORE_ORIGINAL`` extra.

.. warning::

   It is important that your application always extracts the
   `BitmapFuture` instances out of the result intent. Otherwise,
   memory leaks are possible.


.. _scanner-activity-results-example:

Example
-------

.. code-block:: java

        @Override
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            if (requestCode == IMAGE_REQUEST && resultCode == RESULT_OK) {
                final Bundle documentBundle = data.getBundleExtra(ScannerActivity.EXTRA_DOCUMENT_BUNDLE);
                final BitmapFuture documentFuture = documentBundle.getParcelable(ScannerActivity.EXTRA_DOCUMENT);
                final Bitmap document = documentFuture.get();
                // Do something with the document.
            } else if (requestCode == IMAGE_REQUEST && resultCode == ScannerActivty.RESULT_ERROR) {
                // Unfortunately, some error has happened
	        final ScannerActivity.Error error = data.getParcelableExtra(ScannerActivity.EXTRA_ERROR);
	        // We can now do something with the error here
            }
        }



Full Example
============

Below is a full example of an activity which displays a button. When the user clicks on the button,
the activity starts the document scanner. Once the user has successfully scanned a document, the
ScannerActivity returns and the example activity can use the rectified bitmap of the document.

.. code-block:: java

    package net.gini.android.visiontest;

    import android.app.Activity;
    import android.content.Intent;
    import android.graphics.Bitmap;
    import android.os.Bundle;

    import net.gini.android.vision.BitmapFuture;
    import net.gini.android.vision.ScannerActivity;


    public class ExampleActivity extends Activity {

        protected static final int IMAGE_REQUEST = 1;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_example);
        }

        @Override
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            if (requestCode == IMAGE_REQUEST && resultCode == RESULT_OK) {
                final Bundle documentBundle = data.getBundleExtra(ScannerActivity.EXTRA_DOCUMENT_BUNDLE);
                final BitmapFuture documentFuture = documentBundle.getParcelable(ScannerActivity.EXTRA_DOCUMENT);
                final Bitmap document = documentFuture.get();
                // Do something with the document.
            } else if (requestCode == IMAGE_REQUEST && resultCode == ScannerActivty.RESULT_ERROR) {
                // Unfortunately, some error has happened
	        final ScannerActivity.Error error = data.getParcelableExtra(ScannerActivity.EXTRA_ERROR);
	        // We can now do something with the error here
            }
        }


        /**
         * Callback which is called when the user clicked on a button. Starts the document scanner.
         */
        public void onClick(View view) {
            Intent scanIntent = new Intent(this, ScannerActivity.class);
            scanIntent.putExtra(ScannerActivity.EXTRA_STORE_RECTIFIED, true);
	    // MyUploadActivity is your Activity that implements the upload or processing logic.
	    // It needs to be derived from Gini Vision library's UploadActivity.
	    ScannerActivity.setUploadActivityExtra(scanIntent, this, MyUploadActivity.class);
            startActivityForResult(scanIntent, IMAGE_REQUEST);
        }
    }


.. seealso::

    The Android documentation on `Getting a result from an activity
    <http://developer.android.com/training/basics/intents/result.html>`_.
